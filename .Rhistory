RoomType = sample(c("Single", "Double", "General"),7,replace = T),
Floor = sample(c(1,2,3),7,replace = T),
CostperDay = runif(7,min = 800,max = 3000),
Availability = c("No", "No", "No", "No", "Yes","No","No"),
PatientID = c(1,3,1,2,0,4,7)
)
head(Room)
df1 <- merge(Patient, Room, by = "PatientID", all.x = TRUE)
df1
df2 <- rbind(Room,c(108,"Double",1,1000,"Yes",0),c(109,"Double",1,1030,"Yes",0),c(110,"Double",1,2000,"Yes",0))
df2
library(dplyr)
reqPatients <- Patient %>%
group_by(PatientID, PhysicianID)
reqPatients
reqPatients <- Patient %>%
group_by(PatientID, PhysicianID) %>%
filter(n() > 2 & PhysicianID == 3)
reqPatients
reqPatients <- Patient %>%
group_by(PatientID, PhysicianID)
reqPatients
reqPatients <- Patient %>%
group_by(PatientID, PhysicianID) %>%
filter(n() > 2 & PhysicianID == 3) %>% select(PatientID)
reqPatients
reqPatients <- Patient %>%
group_by(PatientID, PhysicianID) %>%
filter(n() > 2 & PhysicianID == 3) %>% select(PatientID)
reqPatients
reqPatients <- Patient %>%
group_by(PatientID, PhysicianID) %>%
filter(n() > 2) %>% select(PatientID)
reqPatients <- Patient %>%
group_by(PatientID, PhysicianID) %>%
filter(n() > 2)
reqPatients
Patient
reqPatients <- Patient %>%
group_by(PatientID, PhysicianID) %>%
filter(count(AppointmentID)>2)
reqPatients <- Patient %>%
group_by(PatientID, PhysicianID) %>%
filter(count(AppointmentID)>2)
reqPatients
reqPatients <- Patient %>%
group_by(PatientID, PhysicianID) %>%
filter(n() >2)
reqPatients
# 4. Generate report of Room with availability count for each type of room.
# 4. Generate report of Room with availability count for each type of room.
Room %>%count(RoomType, Availability)
head(Room)
# 5. Identify and provide information of the rooms occupied on floor=2 and CostperDay is
# more than 1200.
Room %>%filter(Floor == 2, CostperDay > 1200)
# 6. Create a three lists 1)RoomNumber, 2) RoomType (as element 1) 3) Floor .
RoomNumber = Room$RoomNumber
RoomType = Room$RoomType
# 6. Create a three lists 1)RoomNumber, 2) RoomType (as element 1) 3) Floor .
RoomNumber = Room$RoomNumber
RoomType <- list(RoomType = Room$RoomType, Availability = Room$Availability == "Yes")
Floor = Room$Floor
# 7. Add Availability information in logical form (Availability Values as True and False from
#Yes and No) as Element 2 of second list. Then Merge all three Lists.
merged_lists <- list(RoomNumber, RoomType, Floor)
merged_lists
reqPatients <- Patient %>%
group_by(PatientID, PhysicianID) %>%
filter(n() >2 & PhysicianID == 3)
reqPatients
library(dplyr)
# Perform the following operations
# 1. Create the two data sets with given features and add some records considering mentioned
# constraints.
set.seed(123)
Patient <- data.frame(AppointmentID = 1001:1010,
PatientID = c(1,2,3,1,2,3,1,2,3,1),
PatientName = c("Sam","Ram","Random","Sam","Ram","Random","Sam","Ram","Random","Sam"),
NurseID=501:510,
PhysicianID=c(3,3,1,1,2,3,1,2,4,5))
Patient
Room <- data.frame(
RoomNumber = 101:107,
RoomType = sample(c("Single", "Double", "General"),7,replace = T),
Floor = sample(c(1,2,3),7,replace = T),
CostperDay = runif(7,min = 800,max = 3000),
Availability = c("No", "No", "No", "No", "Yes","No","No"),
PatientID = c(1,3,1,2,0,4,7)
)
head(Room)
df1 <- merge(Patient, Room, by = "PatientID", all.x = TRUE)
df1
df2 <- rbind(Room,c(108,"Double",1,1000,"Yes",0),c(109,"Double",1,1030,"Yes",0),c(110,"Double",1,2000,"Yes",0))
df2
library(dplyr)
reqPatients <- Patient %>%
group_by(PatientID, PhysicianID) %>%
filter(n() >2 & PhysicianID == 3)
reqPatients
View(reqPatients)
# Perform the following operations
# 1. Create the two data sets with given features and add some records considering mentioned
# constraints.
set.seed(123)
Patient <- data.frame(AppointmentID = 1001:1010,
PatientID = c(1,2,3,1,2,3,1,2,3,1),
PatientName = c("Sam","Ram","Random","Sam","Ram","Random","Sam","Ram","Random","Sam"),
NurseID=501:510,
PhysicianID=c(3,3,1,1,3,3,1,3,4,5))
Patient
Room <- data.frame(
RoomNumber = 101:107,
RoomType = sample(c("Single", "Double", "General"),7,replace = T),
Floor = sample(c(1,2,3),7,replace = T),
CostperDay = runif(7,min = 800,max = 3000),
Availability = c("No", "No", "No", "No", "Yes","No","No"),
PatientID = c(1,3,1,2,0,4,7)
)
head(Room)
df1 <- merge(Patient, Room, by = "PatientID", all.x = TRUE)
df1
df2 <- rbind(Room,c(108,"Double",1,1000,"Yes",0),c(109,"Double",1,1030,"Yes",0),c(110,"Double",1,2000,"Yes",0))
df2
library(dplyr)
reqPatients <- Patient %>%
group_by(PatientID, PhysicianID) %>%
filter(n() >2 & PhysicianID == 3)
reqPatients
# Perform the following operations
# 1. Create the two data sets with given features and add some records considering mentioned
# constraints.
set.seed(123)
Patient <- data.frame(AppointmentID = 1001:1010,
PatientID = c(1,2,3,1,2,3,1,2,3,1),
PatientName = c("Sam","Ram","Random","Sam","Ram","Random","Sam","Ram","Random","Sam"),
NurseID=501:510,
PhysicianID=c(3,3,1,1,3,3,1,3,4,5))
Patient
Room <- data.frame(
RoomNumber = 101:107,
RoomType = sample(c("Single", "Double", "General"),7,replace = T),
Floor = sample(c(1,2,3),7,replace = T),
CostperDay = runif(7,min = 800,max = 3000),
Availability = c("No", "No", "No", "No", "Yes","No","No"),
PatientID = c(1,3,1,2,0,4,7)
)
head(Room)
Room
df1 <- merge(Patient, Room, by = "PatientID", all.x = TRUE)
df1
df2 <- rbind(Room,c(108,"Double",1,1000,"Yes",0),c(109,"Double",1,1030,"Yes",0),c(110,"Double",1,2000,"Yes",0))
df2
library(dplyr)
reqPatients <- Patient %>%
group_by(PatientID, PhysicianID) %>%
filter(n() >2 & PhysicianID == 3)
reqPatients
# 4. Generate report of Room with availability count for each type of room.
Room %>%count(RoomType, Availability)
# 5. Identify and provide information of the rooms occupied on floor=2 and CostperDay is
# more than 1200.
Room %>%filter(Floor == 2, CostperDay > 1200)
# 6. Create a three lists 1)RoomNumber, 2) RoomType (as element 1) 3) Floor .
RoomNumber = Room$RoomNumber
RoomNumber
# 6. Create a three lists 1)RoomNumber, 2) RoomType (as element 1) 3) Floor .
RoomNumber = list(Room$RoomNumber)
RoomNumber
RoomType <- list(RoomType = Room$RoomType, Availability = Room$Availability == "Yes")
RoomType
Floor = list(Room$Floor)
Floor
# 7. Add Availability information in logical form (Availability Values as True and False from
#Yes and No) as Element 2 of second list. Then Merge all three Lists.
merged_lists <- list(RoomNumber, RoomType, Floor)
merged_lists
gc()
cls
clearPushBack()
# (b) Plot the graph of exponential probability distribution for 0 ≤ x ≤ 5.
x <- seq(0, 5, by = 0.1)
y <- dexp(x, rate = 0.5)
plot(x, y, type = "l", xlab = "x", ylab = "f(x)", main = "Exponential Probability Distribution")
pexp(3, rate = 0.5)
y_cdf <- pexp(x, rate = 0.5)
plot(x, y_cdf, type = "l", xlab = "x", ylab = "P(X <= x)", main = "Cumulative Exponential Distribution")
simulated_data <- rexp(1000, rate = 0.5)
simulated_data <- rexp(1000, rate = 0.5)
# hist(simulated_data, breaks = 20, main = "Simulated Exponential Data", xlab = "x")
plot(density(simulated_data))
# (e) Simulate 1000 exponential distributed random numbers with λ = 1⁄2 and plot the
# simulated data.
#
?rexp
hist(simulated_data, breaks = 20, main = "Simulated Exponential Data", xlab = "x")
plot(density(simulated_data))
pgamma(1,shape = 2,scale = 1/3,lower.tail = FALSE)
qgamma(0.70,shape =  2,scale = 1/3)
qgamma(0.70,shape =  2,scale = 1/3)
library(pracma)
f <- function(x,y){2 * (2 * x + 3 * y) / 5}
res = integral2(f,xmin = 0, xmax = 1,ymin = 0, ymax =1 )
res$Q
# (ii) find marginal distribution g(x) at x = 1.
marx1 = integral(function(y) f(1,y),0,1)
marx1
integral(function(x) f(x,0),0,1)
# (iv) find the expected value of g(x, y) = xy.
integral2(function(x,y) x*y*f(x,y),0,1,0,1)
fun = function(x,y) {(x+y)/30}
mat  = matrix(c(fun(0,0:2),fun(1,0:2),fun(2,0:2),fun(3,0:2)),nrow = 4,byrow = TRUE)
mat
#
# Then write a R-code to
# (i) display the joint mass function in rectangular (matrix) form.
mat
sum(mat)
gx = apply(mat,1,sum)
gx
# (iv) find the marginal distribution h(y) for y = 0, 1, 2. (Use:apply())
hy = apply(mat,2,sum)
hy
# fun(0,1)
mat[1,2] / hy[2]
fun(0,1)
mat[1,2] / hy[2]
s = seq(-6,6,length = 100)
s
df = c(1,4,10,30)
color = c('red','darkgreen','magenta','black')
for( n in 1:4){
i = df[n]
print(i)
rvar = dt(s, i)
print(rvar)
if (i == 1){
plot(rvar, type = 'l',col = color[n],ylim = c(0,0.4))
}
else{
lines(rvar,col = color[n])
}
}
quars = c(0.25,0.5,0.75,0.999)
for ( q in quars){
cat(q , qf(q,10,20),'\n')
}
# (iv) To generate 1000 random values from the F-distribution with v1 = 10 and v2 = 20 (use
#  rf())and plot a histogram.
a =rf(1000, df1 = 10, df2 = 20)
hist(a)
# • A pipe manufacturing organization produces different kinds of pipes. We are given
# the monthly data of the wall thickness of certain types of pipes (data is available on
# LMS Clt-data.csv).
# The organization has an analysis to perform and one of the basic assumption of that
# analysis is that the data should be normally distributed.
# You have the following tasks to do:
# (a) Import the csv data file in R.
data = read.csv(file.choose())
# (c) Calculate the population mean and plot the observations by making a histogram.
meanSample = mean(data$Wall.Thickness)
hist(data$Wall.Thickness)
# (d) Mark the mean computed in last step by using the function abline.
# See the red vertical line in the histogram? That’s the population mean. Comment on
# whether the data is normally distributed or not?
#  v is for vertical line
abline(v = meanSample,col = 'purple',)
# Now perform the following tasks:
# (a) Draw sufficient samples of size 10, calculate their means, and plot them in R
# by making histogram. Do you get a normal distribution.
sample1 = sample(data$Wall.Thickness,10,replace = TRUE)
listMean = c()
for ( i in 1:9000){
meansample = mean(sample(data$Wall.Thickness,10,replace = TRUE))
listMean = c(listMean, meansample)
}
# • A pipe manufacturing organization produces different kinds of pipes. We are given
# the monthly data of the wall thickness of certain types of pipes (data is available on
# LMS Clt-data.csv).
# The organization has an analysis to perform and one of the basic assumption of that
# analysis is that the data should be normally distributed.
# You have the following tasks to do:
# (a) Import the csv data file in R.
data = read.csv(file.choose())
# (b) Validate data for correctness by counting number of rows and viewing the top
# ten rows of the dataset.
head(data,10)
# (c) Calculate the population mean and plot the observations by making a histogram.
meanSample = mean(data$Wall.Thickness)
hist(data$Wall.Thickness)
# (d) Mark the mean computed in last step by using the function abline.
# See the red vertical line in the histogram? That’s the population mean. Comment on
# whether the data is normally distributed or not?
#  v is for vertical line
abline(v = meanSample,col = 'purple',)
# Now perform the following tasks:
# (a) Draw sufficient samples of size 10, calculate their means, and plot them in R
# by making histogram. Do you get a normal distribution.
sample1 = sample(data$Wall.Thickness,10,replace = TRUE)
listMean = c()
for ( i in 1:9000){
meansample = mean(sample(data$Wall.Thickness,10,replace = TRUE))
listMean = c(listMean, meansample)
}
hist(listMean)
abline(v = mean(listMean),col = 'purple')
sampleSize = c(10,50,100,500,900,3000)
par(mfrow = c(2,3))
for (ss in sampleSize){
listMean = c()
for ( i in 1:9000){
meansample = mean(sample(data$Wall.Thickness,50,replace = TRUE))
listMean = c(listMean, meansample)
}
hist(listMean,main = paste('Histogram of',ss))
abline(v  =  mean(listMean) , col = 'cyan')
}
## Write a short comment describing this function
# This function is responsible for set, get, setinverse and getinverse operations
makeCacheMatrix <- function(x = matrix()) {
# Initialize the inverse_matrix
inverse_matrix <- NULL
# Function to set the matrix
set <- function(mat){
x <<- mat
inverse_matrix <<- NULL
}
# Function to get the matrix
get <- function() x
# Function to set the inverse matrix
setinverse <- function(im) inverse_matrix <<- im
# Function to get the inverse matrix
getinverse <- function() inverse_matrix
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
## Write a short comment describing this function
# This function checks whether the inverse matrix is already present or not. If present, it returns it otherwise
# it solves for inverse matrix and then returns it.
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
# Retrieve the inverse matrix
inverse_matrix <- x$getinverse()
# If the inverse matrix is cached, return it
if(!is.null(inverse_matrix)) {
message("getting cached data")
return(inverse_matrix)
}
# If the inverse matrix is not cached, calculate it
data <- x$get()
inverse_matrix <- solve(data, ...)
# Cache the calculated inverse matrix
x$setinverse(inverse_matrix)
# Return the calculated inverse matrix
inverse_matrix
}
## Sample Example for Testing
myMatrix <- makeCacheMatrix(matrix(c(1:9), nrow = 3, byrow = TRUE))
cat("Original Matrix:\n")
print(myMatrix$get())
invMatrix <- cacheSolve(myMatrix)
cat("\nInverse Matrix:\n")
print(invMatrix)
cachedInvMatrix <- cacheSolve(myMatrix)
cat("\nCached Inverse Matrix:\n")
print(cachedInvMatrix)
## Sample Example for Testing
myMatrix <- makeCacheMatrix(matrix(c(1,2,1,3,4,5,2,1,3), nrow = 3, byrow = TRUE))
cat("Original Matrix:\n")
print(myMatrix$get())
invMatrix <- cacheSolve(myMatrix)
cat("\nInverse Matrix:\n")
print(invMatrix)
cachedInvMatrix <- cacheSolve(myMatrix)
cat("\nCached Inverse Matrix:\n")
print(cachedInvMatrix)
## Sample Example for Testing
myMatrix <- makeCacheMatrix(matrix(c(10:19:2), nrow = 3, byrow = TRUE))
cat("Original Matrix:\n")
print(myMatrix$get())
## Sample Example for Testing
myMatrix <- makeCacheMatrix(matrix(c(10:18:2), nrow = 3, byrow = TRUE))
cat("Original Matrix:\n")
print(myMatrix$get())
## Sample Example for Testing
myMatrix <- makeCacheMatrix(matrix(c(10:18), nrow = 3, byrow = TRUE))
cat("Original Matrix:\n")
print(myMatrix$get())
invMatrix <- cacheSolve(myMatrix)
cat("\nInverse Matrix:\n")
## Sample Example for Testing
myMatrix <- makeCacheMatrix(matrix(c(1,2,3,5,6,7,8,2,13,1), nrow = 3, byrow = TRUE))
cat("Original Matrix:\n")
print(myMatrix$get())
## Sample Example for Testing
myMatrix <- makeCacheMatrix(matrix(c(1,2,3,5,6,7,8,2,13), ncol= 3, byrow = TRUE))
cat("Original Matrix:\n")
print(myMatrix$get())
invMatrix <- cacheSolve(myMatrix)
cat("\nInverse Matrix:\n")
print(invMatrix)
## Sample Example for Testing
myMatrix <- makeCacheMatrix(matrix(c(1,2,3,5,6,7,8,2,13), ncol= 3)
cat("Original Matrix:\n")
print(myMatrix$get())
invMatrix <- cacheSolve(myMatrix)
cat("\nInverse Matrix:\n")
print(invMatrix)
cachedInvMatrix <- cacheSolve(myMatrix)
cat("\nCached Inverse Matrix:\n")
print(cachedInvMatrix)
print(invMatrix == cachedInvMatrix)
## Function to create a matrix with caching capabilities
makeCacheMatrix <- function(initial_matrix = matrix()) {
cached_inverse <- NULL  # Initialize the cached inverse
# Function to set the matrix
set <- function(new_matrix) {
initial_matrix <<- new_matrix  # Update the matrix
cached_inverse <<- NULL  # Reset the cached inverse
}
# Function to retrieve the matrix
get <- function() initial_matrix
# Function to set the cached inverse
setinverse <- function(new_inverse) {
cached_inverse <<- new_inverse  # Update the cached inverse
}
# Function to retrieve the cached inverse
getinverse <- function() cached_inverse
# Return a list of functions for matrix operations and caching
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
## Function to compute and cache the inverse of a matrix
cacheSolve <- function(matrix_obj, ...) {
cached_inv <- matrix_obj$getinverse()  # Retrieve the cached inverse
if (!is.null(cached_inv)) {
message("Retrieving cached inverse")
return(cached_inv)  # Return the cached inverse if available
}
original_matrix <- matrix_obj$get()  # Retrieve the original matrix
computed_inv <- solve(original_matrix, ...)  # Compute the inverse
matrix_obj$setinverse(computed_inv)  # Cache the computed inverse
computed_inv  # Return the computed inverse
}
# Sample Example for Testing
myMatrix <- makeCacheMatrix(matrix(c(1, 2, 3, 5, 6, 7, 8, 2, 13), ncol = 3))  # Create a matrix object
cat("Original Matrix:\n")
print(myMatrix$get())  # Display the original matrix
invMatrix <- cacheSolve(myMatrix)  # Compute and cache the inverse
cat("\nInverse Matrix:\n")
print(invMatrix)  # Display the computed inverse
cachedInvMatrix <- cacheSolve(myMatrix)  # Retrieve the cached inverse
cat("\nCached Inverse Matrix:\n")
print(cachedInvMatrix)  # Display the cached inverse
## Function to create a matrix object which will have caching capabilities
## contains function to set,get normal and inverse mats
makeCacheMatrix <- function(initial_matrix = matrix()) {
cached_inverse <- NULL  # Initialize the cached inverse
# Function to set the matrix
set <- function(new_matrix) {
initial_matrix <<- new_matrix  # Update the matrix
cached_inverse <<- NULL  # Reset the cached inverse
}
# Function to retrieve the matrix
get <- function() initial_matrix
# Function to set the cached inverse
set_inverse <- function(new_inverse) {
cached_inverse <<- new_inverse  # Update the cached inverse
}
# Function to retrieve the cached inverse
get_inverse <- function() cached_inverse
# Return a list of functions for matrix operations and caching
list(set = set, get = get,
set_inverse = set_inverse,
get_inverse = get_inverse)
}
## Function to compute and cache the inverse of a matrix
cacheSolve <- function(matrix_obj, ...) {
cached_inv <- matrix_obj$get_inverse()  # Retrieve the cached inverse
if (!is.null(cached_inv)) {
message("Retrieving cached inverse")
return(cached_inv)  # Return the cached inverse if available
}
message("Inverse Not found in Cache, Computing ...")
original_matrix <- matrix_obj$get()  # Retrieve the original matrix
computed_inv <- solve(original_matrix, ...)  # Compute the inverse
matrix_obj$set_inverse(computed_inv)  # Cache the computed inverse
computed_inv  # Return the computed inverse
}
# Sample Example for Testing
myMatrix <- makeCacheMatrix(matrix(c(1, 2, 3, 5, 6, 7, 8, 2, 13), ncol = 3))  # Create a matrix object
cat("Original Matrix:\n")
print(myMatrix$get())  # Display the original matrix
invMatrix <- cacheSolve(myMatrix)  # Compute and cache the inverse
cat("\nInverse Matrix:\n")
print(invMatrix)  # Display the computed inverse
cachedInvMatrix <- cacheSolve(myMatrix)  # Retrieve the cached inverse
cat("\nCached Inverse Matrix:\n")
print(cachedInvMatrix)  # Display the cached inverse
print(invMatrix == cachedInvMatrix)  # Check if both inverses are equal
setwd("C:/Users/samar/Desktop/Programming/R/ExData_Plotting1")
#Reading, naming and subsetting power consumption data
power <- read.table("household_power_consumption.txt",skip=1,sep=";")
names(power) <- c("Date","Time","Global_active_power","Global_reactive_power","Voltage","Global_intensity",
"Sub_metering_1","Sub_metering_2","Sub_metering_3")
subpower <- subset(power,power$Date=="1/2/2007" | power$Date =="2/2/2007")
library("data.table")
setwd("C:/Users/samar/Desktop/Programming/R/ExData_Plotting1")
#Reading, naming and subsetting power consumption data
power <- read.table("household_power_consumption.txt",skip=1,sep=";")
